name: Build, Push, and Deploy

on:
  push:
    branches:
      - main

env:
  APP_PORT_HOST: 3000
  CONTAINER_NAME: frontend

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest # 최신 Ubuntu 환경에서 실행

    steps:
      # Step 1: Check out the repository so the job can access it
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Authenticate to Google Cloud
      - name: Authenticate to Google Cloud
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}' # GitHub Secret에서 서비스 계정 키 사용
      
      # Step 3: Set up the Google Cloud SDK
      - name: Set up Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v2'

      # Step 4: Configure Docker to use the gcloud command-line tool as a credential helper
      - name: Configure Docker
        run: gcloud auth configure-docker ${{ secrets.GCP_REGION }}-docker.pkg.dev

      - name: Build and Push Docker Image to Artifact Registry # 5. Docker 이미지 빌드 및 푸시
        run: |
          # Docker 이미지의 전체 URI 정의
          IMAGE_URI="${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.ARTIFACT_REPO_NAME }}/server:latest"
          
          # Docker 이미지 빌드
          echo "Building Docker image: ${IMAGE_URI}"
          docker build -t $IMAGE_URI .
          
          # Docker 이미지 푸시
          echo "Pushing Docker image to Artifact Registry..."
          docker push $IMAGE_URI
          
          # 다음 단계에서 사용할 수 있도록 이미지 URI를 출력
          echo "IMAGE_URI=${IMAGE_URI}" >> $GITHUB_ENV
          
          echo "Docker image pushed successfully!"

      - name: Deploy to Compute Engine via SSH # 6. Compute Engine 인스턴스에 SSH로 접속하여 배포
        uses: appleboy/ssh-action@v0.1.6
        with:
          command_timeout: 30m
          host: ${{ secrets.VM_SSH_HOST }}
          username: ${{ secrets.VM_SSH_USER }}
          key: ${{ secrets.VM_SSH_KEY }}
          port: 22
          script: |
            APP_IMAGE_URI="${{ env.IMAGE_URI }}" # 이전 단계에서 설정된 환경 변수 사용
            APP_CONTAINER_NAME="${{ env.CONTAINER_NAME }}"
            
            # FastAPI 서버 포트 설정
            APP_PORT_HOST="${{ env.APP_PORT_HOST }}"
            APP_PORT_CONTAINER="${{ env.APP_PORT_HOST }}"

            echo "Stopping and removing existing container (if any)..."
            sudo docker stop ${APP_CONTAINER_NAME} || true
            sudo docker rm ${APP_CONTAINER_NAME} || true

            echo "Pulling latest Docker image: ${APP_IMAGE_URI}..."
            sudo docker pull ${APP_IMAGE_URI}

            echo "Running new Docker container..."
            sudo docker run -d \
              --add-host="localhost:host-gateway" \
              --name ${APP_CONTAINER_NAME} \
              -p ${{ env.APP_PORT_HOST }}:${{ env.APP_PORT_HOST }} \
              --restart always \
              ${APP_IMAGE_URI}

            echo "Deployment to Compute Engine completed successfully!"
